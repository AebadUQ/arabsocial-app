// components/comments/CommentsSheet.tsx
import React, {
  forwardRef,
  useCallback,
  useImperativeHandle,
  useMemo,
  useRef,
  useState,
} from "react";
import {
  View,
  Text,
  Image,
  StyleSheet,
  ActivityIndicator,
  ScrollView,
  TouchableOpacity,
  TextInput,
} from "react-native";
import {
  BottomSheetModal,
  BottomSheetView,
  BottomSheetBackdrop,
  BottomSheetBackdropProps,
} from "@gorhom/bottom-sheet";
import { useTheme } from "@/theme/ThemeContext";

// ⬇️ ADD THIS: your posts API helper
import { addPostComment } from "@/api/post"; 
// (Agar aapki file path different hai to adjust kar lein)

export type CommentItemType = {
  id: number | string;
  content?: string | null;
  created_at?: string;
  createdAt?: string;
  user?: { name?: string | null; image?: string | null } | null;
  author?: { name?: string | null; image?: string | null } | null;
};

export type ApiPostLite = { id: number | string };

export type CommentsSheetHandle = {
  present: (post: ApiPostLite) => void;
  close: () => void;
};

type Props = {
  loadPage: (
    postId: number | string,
    page: number,
    limit: number
  ) => Promise<{ data: CommentItemType[]; total: number }>;
  pageSize?: number;
  title?: string;
};

const CommentsSheet = forwardRef<CommentsSheetHandle, Props>(
  ({ loadPage, pageSize = 10, title = "Comments" }, ref) => {
    const { theme } = useTheme();
    const sheetRef = useRef<BottomSheetModal>(null);

    const [selectedPost, setSelectedPost] = useState<ApiPostLite | null>(null);
    const [comments, setComments] = useState<CommentItemType[]>([]);
    const [total, setTotal] = useState(0);
    const [page, setPage] = useState(1);
    const [loading, setLoading] = useState(false);
    const [loadingMore, setLoadingMore] = useState(false);

    const [newComment, setNewComment] = useState("");
    const [posting, setPosting] = useState(false); // ⬅️ NEW

    const snapPoints = useMemo(() => ["40%", "80%"], []);
    const renderBackdrop = useCallback(
      (props: BottomSheetBackdropProps) => (
        <BottomSheetBackdrop
          {...props}
          appearsOnIndex={0}
          disappearsOnIndex={-1}
          opacity={0.35}
          pressBehavior="close"
        />
      ),
      []
    );

    const timeAgo = (iso?: string) => {
      if (!iso) return "";
      const diff = Math.max(0, Date.now() - new Date(iso).getTime());
      const m = Math.floor(diff / 60000);
      if (m < 1) return "just now";
      if (m < 60) return `${m}m`;
      const h = Math.floor(m / 60);
      if (h < 24) return `${h}h`;
      const d = Math.floor(h / 24);
      return `${d}d`;
    };

    const getInitials = (name?: string | null) =>
      (!name ? "?" : name.split(" ").filter(Boolean).slice(0, 2).map(s => s[0]?.toUpperCase()).join(""));

    const CommentRow = ({ item }: { item: CommentItemType }) => {
      const name = item?.author?.name ?? item?.user?.name ?? "Anonymous";
      const avatar = item?.author?.image ?? item?.user?.image ?? null;
      const created = item?.created_at || item?.createdAt;

      return (
        <View style={[styles.commentRow, { borderBottomColor: theme.colors.borderColor }]}>
          {avatar ? (
            <Image source={{ uri: avatar }} style={styles.commentAvatar} />
          ) : (
            <View style={[styles.commentAvatar, { backgroundColor: "#E5E7EB", alignItems: "center", justifyContent: "center" }]}>
              <Text style={{ fontSize: 10, fontWeight: "700", color: "#6B7280" }}>{getInitials(name)}</Text>
            </View>
          )}
          <View style={styles.commentBody}>
            <View style={styles.commentHeader}>
              <Text style={[styles.commentName, { color: theme.colors.text, textTransform: "capitalize" }]} numberOfLines={1}>
                {name}
              </Text>
              <Text style={[styles.commentTime, { color: theme.colors.textLight }]}>{timeAgo(created)}</Text>
            </View>
            <Text style={[styles.commentText, { color: theme.colors.textLight }]}>{item?.content ?? ""}</Text>
          </View>
        </View>
      );
    };

    const fetchFirstPage = async (postId: number | string) => {
      setLoading(true);
      try {
        const res = await loadPage(postId, 1, pageSize);
        setComments(res.data || []);
        setTotal(res.total || res.data?.length || 0);
        setPage(1);
      } finally {
        setLoading(false);
      }
    };

    const loadMore = async () => {
      if (!selectedPost) return;
      if (comments.length >= total) return;

      const next = page + 1;
      try {
        setLoadingMore(true);
        const res = await loadPage(selectedPost.id, next, pageSize);
        setComments(prev => [...prev, ...(res.data || [])]);
        setPage(next);
      } finally {
        setLoadingMore(false);
      }
    };

    // ⬇️ UPDATED: call the real API with optimistic UI
    const handleAddComment = async () => {
      if (!newComment.trim() || !selectedPost || posting) return;

      const tempId = `local-${Date.now()}`;
      const optimistic: CommentItemType = {
        id: tempId,
        content: newComment.trim(),
        createdAt: new Date().toISOString(),
        user: { name: "You", image: null },
      };

      // optimistic prepend + clear input
      setComments(prev => [optimistic, ...prev]);
      setTotal(t => t + 1);
      setNewComment("");
      setPosting(true);

      try {
        const created = await addPostComment({
          postId: selectedPost.id,
          content: optimistic.content || "",
        });

        // Server ne agar full comment object return kiya
        if (created && created.id) {
          setComments(prev =>
            prev.map(c => (String(c.id) === tempId ? created : c))
          );
        }
      } catch (err) {
        // rollback on error
        setComments(prev => prev.filter(c => String(c.id) !== tempId));
        setTotal(t => Math.max(0, t - 1));
        // TODO: yahan toast/snackbar dikhayein agar aapke paas hai
      } finally {
        setPosting(false);
      }
    };

    useImperativeHandle(ref, () => ({
      present: async (post: ApiPostLite) => {
        setSelectedPost(post);
        await fetchFirstPage(post.id);
        sheetRef.current?.present();
      },
      close: () => sheetRef.current?.dismiss(),
    }));

    return (
      <BottomSheetModal
        ref={sheetRef}
        snapPoints={snapPoints}
        enablePanDownToClose
        index={1}
        backdropComponent={renderBackdrop}
        backgroundStyle={{
          backgroundColor: theme.colors.background,
          borderTopLeftRadius: 16,
          borderTopRightRadius: 16,
        }}
        handleIndicatorStyle={{ backgroundColor: theme.colors.primary }}
      >
        <BottomSheetView style={{ flex: 1, padding: 16 }}>
          {/* Heading */}
          <Text style={{ color: theme.colors.text, fontWeight: "600", marginBottom: 8 }}>
            {title}
            {selectedPost?.id ? ` • #${selectedPost.id}` : ""}
          </Text>

          {/* Comment box directly under heading */}
          <View
            style={[
              styles.newCommentRow,
              {
                borderColor: theme.colors.borderColor || "#e5e7eb",
                backgroundColor: theme.colors.textWhite || theme.colors.background,
              },
            ]}
          >
            <TextInput
              placeholder="Add a comment…"
              placeholderTextColor={theme.colors.textLight}
              value={newComment}
              onChangeText={setNewComment}
              style={[styles.newCommentInput, { color: theme.colors.text }]}
              multiline
              editable={!posting}
            />
            <TouchableOpacity onPress={handleAddComment} disabled={!newComment.trim() || posting}>
              {posting ? (
                <ActivityIndicator size="small" color={theme.colors.primary} />
              ) : (
                <Text
                  style={{
                    color: newComment.trim() ? theme.colors.primary : theme.colors.textLight,
                    fontWeight: "700",
                  }}
                >
                  Send
                </Text>
              )}
            </TouchableOpacity>
          </View>

          {/* List */}
          {loading ? (
            <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>
              <ActivityIndicator color={theme.colors.primary} />
              <Text style={{ color: theme.colors.textLight, marginTop: 6 }}>Loading comments...</Text>
            </View>
          ) : comments.length === 0 ? (
            <Text style={{ color: theme.colors.textLight, marginTop: 12 }}>No comments yet.</Text>
          ) : (
            <ScrollView keyboardShouldPersistTaps="handled" contentContainerStyle={{ paddingTop: 8 }}>
              {comments.map(c => (
                <CommentRow key={String(c.id)} item={c} />
              ))}

              {comments.length < total && (
                <TouchableOpacity
                  onPress={loadMore}
                  style={{ padding: 10, alignItems: "center", justifyContent: "center" }}
                  disabled={loadingMore}
                >
                  {loadingMore ? (
                    <ActivityIndicator color={theme.colors.primary} />
                  ) : (
                    <Text style={{ color: theme.colors.primary, fontWeight: "600" }}>
                      Load more comments
                    </Text>
                  )}
                </TouchableOpacity>
              )}
            </ScrollView>
          )}
        </BottomSheetView>
      </BottomSheetModal>
    );
  }
);

const styles = StyleSheet.create({
  // comment item
  commentRow: {
    flexDirection: "row",
    paddingVertical: 10,
    gap: 10,
    borderBottomWidth: 1,
  },
  commentAvatar: { width: 24, height: 24, borderRadius: 12, overflow: "hidden" },
  commentBody: { flex: 1 },
  commentHeader: { flexDirection: "row", alignItems: "center" },
  commentName: { fontSize: 13, fontWeight: "600", flexShrink: 1, marginRight: 8 },
  commentTime: { fontSize: 11 },
  commentText: { marginTop: 4, fontSize: 13, lineHeight: 18 },

  // simple inline comment box
  newCommentRow: {
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 1,
    borderRadius: 10,
    paddingHorizontal: 10,
    paddingVertical: 8,
    gap: 8,
    minHeight: 44,
    marginBottom: 12,
  },
  newCommentInput: { flex: 1, minHeight: 28, maxHeight: 96, paddingTop: 4, paddingBottom: 4 },
});

export default CommentsSheet;
